<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="RankMovieDAO">
    <!-- 랭크가 rank_no인 항목 가져오기 -->
    <select id="selectTop" parameterType="int" resultType="RankMovieVO">
    	select *
		from (
		select 
		row_number() over(order by moviePopularity desc) as rank_no, r.moviePopularity, m.*
		from popcorn.rankmovie r, popcorn.movie m
		where r.movieId = m.movieId) top
		where rank_no = #{rank_no}
    </select>
    
    <!-- movie 테이블에서 rankMovie 테이블에 없는 값 insert하기 (left outer join 사용) -->
    <insert id="movieInsert" parameterType="RankMovieVO">
    	insert into popcorn.rankmovie (movieId)
		select m.movieId
		from popcorn.movie m left outer join popcorn.rankmovie r on m.movieId = r.movieId
		where r.movieId is null
    </insert>
    
    <!-- 페이징하기 위함 -->
	<!-- 전체 랭킹 : 순위별 페이징 -->
    <select id="all" parameterType="RankMoviePageVO" resultType="RankMovieVO">
    	select * from(
    		select 
			row_number() over(order by moviePopularity desc) as rank_no, r.moviePopularity, m.*
			from popcorn.rankmovie r, popcorn.movie m
			where r.movieId = m.movieId) rank2
		where rank2.rank_no between ${start} and ${end}
    </select>
    <!-- 페이지별 목록 불러오기 -->
    <select id="list" parameterType="RankMoviePageVO" resultType="RankMovieVO">
    	select * from(
    		select 
			row_number() over(order by moviePopularity desc) as rank_no, r.moviePopularity, m.*
			from popcorn.rankmovie r, popcorn.movie m
			where r.movieId = m.movieId) rank2
		where rank2.rank_no between ${start} and ${end}
    </select>
    
    <select id="count" resultType="Integer">
    	select count(*)
    	from popcorn.movie
    </select>
    
    
    <!-- 상위 20개 중에서 3가지를 랜덤으로 추출하여 추천 -->
    <select id="recoList" resultType="RankMovieVO">
    	select *
		from (
			select row_number() over(order by moviePopularity desc) as rank_no, r.moviePopularity, m.*
			from popcorn.rankmovie r, popcorn.movie m
			where r.movieId = m.movieId) list
		where list.rank_no between 1 and 20
		order by rand()
		limit 3
    </select>
    
    
    <!-- 스케줄러 업데이트 테스트 -->
    <update id="rankUpdate2" parameterType="java.util.List">	<!-- java.util.List -->
		<foreach collection="list" item="item" index="index">
	    	update popcorn.rankmovie m
			set m.moviePopularity = (
			select (total.movieLike*0.3 + total.movieHits*0.3 + total.movieReviews*0.3) as per
			from
				(select r.*, m.movieLike, m.movieHits, m.movieReviews
				from popcorn.rankmovie r, popcorn.movie m
				where r.movieId = m.movieId
				) total
			where total.movieId = #{item.movieId}
			)
			where m.movieId = #{item.movieId}
		</foreach>
    </update>
    
    <!-- java자제에서 for문으로 저장하기 테스트 -->
    <update id="rankUpdate3" parameterType="RankMovieVO">	<!-- java.util.List -->
	    	update popcorn.rankmovie m
			set m.moviePopularity = (
			select (total.movieLike*0.3 + total.movieHits*0.3 + total.movieReviews*0.3) as per
			from
				(select r.*, m.movieLike, m.movieHits, m.movieReviews
				from popcorn.rankmovie r, popcorn.movie m
				where r.movieId = m.movieId
				) total
			where total.movieId = #{movieId}
			)
			where m.movieId = #{movieId}
    </update>
    
    <select id="movieIdList" resultType="RankMovieVO">
    	select movieId
    	from popcorn.movie
    </select>
    
    <select id="testAll" resultType="RankMovieVO">
    	select *
    	from(
    		select 
			row_number() over(order by moviePopularity desc) as rank_no, r.moviePopularity, m.*
			from popcorn.rankmovie r, popcorn.movie m
			where r.movieId = m.movieId) rank2
    </select>
    <!-- 스케줄러 업데이트 테스트 끝 -->
    
    
    <!-- 랭킹 업데이트는 언제 해야할까? -->
    <update id="rankUpdate" parameterType="String">
    	update popcorn.rankmovie m
		set m.moviePopularity = (
		select (total.movieLike*0.3 + total.movieHits*0.3 + total.movieReviews*0.3) as per
		from
			(select r.*, m.movieLike, m.movieHits, m.movieReviews
			from popcorn.rankmovie r, popcorn.movie m
			where r.movieId = m.movieId
			) total
		where total.movieId = #{movieId}
		)
		where m.movieId = #{movieId}
    </update>
</mapper>