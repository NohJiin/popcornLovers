<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="RankUserDAO">
    <!-- 랭크가 rank_no인 항목 가져오기 -->
    <select id="selectTop" parameterType="int" resultType="RankUserVO">
    	select *
		from (select
		row_number() over(order by memberPopularity DESC) as rank_no, r.memberPopularity, m.*
		from popcorn.rankuser r, popcorn.member m
		where r.member_id = m.member_id) top
		where rank_no = #{rank_no}
    </select>
    
    <!-- member 테이블에서 rankUser 테이블애 없는 값 insert하기 (left outer join 사용) -->
    <insert id="userInsert" parameterType="RankUserVO">
    	insert into popcorn.rankuser (member_id)
		select m.member_id
		from popcorn.member m left outer join popcorn.rankuser r on m.member_id = r.member_id
		where r.member_id is null
    </insert>
    
<!-- 	전체 랭킹 : 순위별  
    <select id="all" resultType="RankUserVO">
    	select
		row_number () over(order by memberPopularity desc) as rank_no, r.memberPopularity, m.*
		from popcorn.rankuser r, popcorn.member m 
		where r.member_id = m.member_id 
    </select> -->
    
    
    <!-- 페이징하기 위함 -->
	<!-- 전체 랭킹 : 순위별 페이징 -->
    <select id="all" parameterType="RankUserPageVO" resultType="RankUserVO">
    	select * from (
    	select
		row_number () over(order by memberPopularity desc) as rank_no, r.memberPopularity, m.*
		from popcorn.rankuser r, popcorn.member m 
		where r.member_id = m.member_id) total
		where total.rank_no between ${start} and ${end}
    </select>
    
    <select id="list" parameterType="RankUserPageVO" resultType="RankUserVO">
    	select * from (
    	select
		row_number () over(order by memberPopularity desc) as rank_no, r.memberPopularity, m.*
		from popcorn.rankuser r, popcorn.member m 
		where r.member_id = m.member_id) total
		where total.rank_no between ${start} and ${end}
    </select>
    
    <select id="count" resultType="Integer">
    	select count(*)
    	from popcorn.member
    </select>
    
    
    <!-- 상위 20개 중에서 3가지를 랜덤으로 추출하여 추천 -->
    <select id="recoList" resultType="RankUserVO">
    	select *
		from (
			select row_number() over(order by memberPopularity desc) as rank_no, r.memberPopularity, m.*
			from popcorn.rankuser r, popcorn.member m
			where r.member_id = m.member_id) list
		where list.rank_no between 1 and 20
		order by rand()
		limit 3
    </select>
    
    
    <!-- 스케줄러 업데이트 테스트 -->
    <update id="rankUpdate2" parameterType="java.util.List">	<!-- java.util.List -->
		<foreach collection="list" item="item" index="index">
			update popcorn.rankuser r
			set r.memberPopularity = (
				select (total.member_fav*0.3 + total.member_view*0.3) as per
				from
				(select u.*, m.member_fav, m.member_view
				from popcorn.rankuser u, popcorn.member m
				where u.member_id = m.member_id
				) total
			where total.member_id = #{item.member_id}
			)
			where r.member_id = #{item.member_id}
		</foreach>
    </update>
    
    <!-- java자제에서 for문으로 저장하기 테스트 -->
    <update id="rankUpdate3" parameterType="RankUserVO">	<!-- java.util.List -->
	    update popcorn.rankuser r
		set r.memberPopularity = (
			select (total.member_fav*0.3 + total.member_view*0.3) as per
			from
				(select u.*, m.member_fav, m.member_view
				from popcorn.rankuser u, popcorn.member m
				where u.member_id = m.member_id
			) total
			where total.member_id = #{member_id}
			)
		where r.member_id = #{member_id}
    </update>
    
    <select id="memberIdList" resultType="RankUserVO">
    	select member_id
    	from popcorn.member
    </select>
    
    <select id="testAll" resultType="RankUserVO">
    	select * 
    	from (
    		select
			row_number () over(order by memberPopularity desc) as rank_no, r.memberPopularity, m.*
			from popcorn.rankuser r, popcorn.member m 
			where r.member_id = m.member_id) total
    </select>
    <!-- 스케줄러 업데이트 테스트 끝 -->
    
    <!-- member 테이블에서 삭제된 id와 동일한 아이디를 rankuser 테이블에서도 삭제 -->
    <delete id="rankDel" parameterType="String">
    	delete from popcorn.rankuser r
		where r.member_id = ${member_id}
    </delete>
</mapper>